makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the matrix.
## If the inverse is calculated and stored in a cache,
## then it pulls that value from the cache.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if (!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setinverse(m)
m
}
B <- matrix()
B <- matrix (c(1,2,3,4), nrow = 2, ncol = 2)
x <- matrix (c(1,2,3,4), nrow =2, ncol=2)
cacheSolve(x)
debug(cacheSolve)
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function calculates the inverse of the matrix.
## If the inverse is calculated and stored in a cache,
## then it pulls that value from the cache.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if (!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setinverse(m)
m
}
x <- matrix (c(1,2,3,4), nrow = 2, ncol=2)
makeCacheMatrix(x)
cacheSolve(x)
x
x <- matrix(c(4,3,3,2), nrow=2, ncol=2)
makeCacheMatrix(x)
cacheSolve(x)
debug(makeCacheMatrix)
debug(makeCacheMatrix)
makeCacheMatrix(c(4,3,3,2), ncol=2, nrow = 2)
makeCacheMatrix <- function(x = as.matrix(numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = as.matrix(numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
debugSource('C:/Users/Tessa/Desktop/ProgrammingAssignment2/cachematrix.R')
